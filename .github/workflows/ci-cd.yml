name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # Trigger on all branches
  pull_request:
    branches:
      - '**'

env:
  JAVA_VERSION: 17
  APP_NAME: welcome
  IMAGE_NAME: welcome-app
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  DEPLOY_NAMESPACE: samrat-dev
  DEPLOY_ENV: non-prod

jobs:
  # ==========================================================
  # 1Ô∏è‚É£ BUILD STAGE
  # ==========================================================
  build:
    name: üèóÔ∏è Build & Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Build and Package
        run: mvn -B clean package -DskipTests

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-jar
          path: target/*.jar

  # ==========================================================
  # 2Ô∏è‚É£ VERIFY BUILD STAGE
  # ==========================================================
  verify-build:
    name: üîç Verify Build Quality & Security
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-jar

      - name: BlackDuck Scan
        run: echo "Running BlackDuck scan... (placeholder - integrate BlackDuck CLI/API here)"
        continue-on-error: true

      - name: Code Quality
        run: echo "Running SonarCloud code quality analysis..."
        continue-on-error: true

      - name: Xray Scan
        run: echo "Running JFrog Xray scan..."
        continue-on-error: true

      - name: Checkmarx Scan
        run: echo "Running Checkmarx SAST scan..."
        continue-on-error: false

      - name: SAST Scan
        run: echo "Performing Static Application Security Test (SAST)..."

      - name: SCA Scan
        run: echo "Performing Software Composition Analysis (SCA)..."

      - name: Unit Tests
        run: mvn -B test

  # ==========================================================
  # 3Ô∏è‚É£ BUILD CONTAINER STAGE
  # ==========================================================
  build-container:
    name: üê≥ Build Docker Image
    runs-on: ubuntu-latest
    needs: verify-build

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # ==========================================================
  # 4Ô∏è‚É£ VERIFY DOCKER STAGE
  # ==========================================================
  verify-docker:
    name: üîê Container Security Scan
    runs-on: ubuntu-latest
    needs: build-container

    steps:
      - name: Container Vulnerability Scan
        run: echo "Running container vulnerability scan (Trivy, Grype, or JFrog Xray)..."

  # ==========================================================
  # 5Ô∏è‚É£ DEPLOY STAGE
  # ==========================================================
  deploy:
    name: üöÄ Deploy to Non-Prod
    runs-on: ubuntu-latest
    needs: verify-docker
    environment: non-prod

    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      - name: Deploy to Kubernetes (Non-Prod)
        run: |
          kubectl set image deployment/${{ env.APP_NAME }} \
            ${{ env.APP_NAME }}=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n ${{ env.DEPLOY_NAMESPACE }}
          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.DEPLOY_NAMESPACE }}

  # ==========================================================
  # 6Ô∏è‚É£ VALIDATE DEPLOY STAGE
  # ==========================================================
  validate-deploy:
    name: ‚úÖ Validate Deployment
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Verify Pod Status
        run: |
          kubectl get pods -n ${{ env.DEPLOY_NAMESPACE }}
          kubectl get deployment ${{ env.APP_NAME }} -n ${{ env.DEPLOY_NAMESPACE }}

      - name: Check Application Health Endpoint
        run: |
          echo "Validating /actuator/health endpoint..."
          sleep 10
          curl -f http://mybank.${{ env.DEPLOY_ENV }}.example.com/actuator/health || exit 1
