name: Full CI/CD Pipeline

on:
  push:
    branches:
      - '**' # Trigger on push to all branches

jobs:
  # -----------------------------------------------------------
  # 1Ô∏è‚É£ BUILD STAGE
  # -----------------------------------------------------------
  build:
    name: üèóÔ∏è Build - compile-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile and Package
        run: mvn clean package -DskipTests


  # -----------------------------------------------------------
  # 2Ô∏è‚É£ VERIFY BUILD STAGE (multiple checks vertically)
  # -----------------------------------------------------------
  verify-build:
    name: üîç Verify Build
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [blackduck-scan, code-quality, xray_scan, checkmarx_scan, sast-scan, sca-scan, unit-test]
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run ${{ matrix.check }}
        run: |
          echo "Running ${{ matrix.check }}..."
          sleep 3
          if [[ "${{ matrix.check }}" == "blackduck-scan" || "${{ matrix.check }}" == "code-quality" || "${{ matrix.check }}" == "xray_scan" ]]; then
            echo "‚ùå Simulating failed check for ${{ matrix.check }}"
            exit 1
          else
            echo "‚úÖ ${{ matrix.check }} passed successfully"
          fi


  # -----------------------------------------------------------
  # 3Ô∏è‚É£ BUILD-CONTAINER STAGE
  # -----------------------------------------------------------
  build-container:
    name: üê≥ Build Docker
    needs: verify-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/triumph-healthcheck:latest


  # -----------------------------------------------------------
  # 4Ô∏è‚É£ VERIFY-DOCKER STAGE
  # -----------------------------------------------------------
  verify-docker:
    name: üß™ Verify Docker - container-scan
    needs: build-container
    runs-on: ubuntu-latest
    steps:
      - name: Container Security Scan
        run: |
          echo "Running container scan..."
          sleep 2
          echo "‚úÖ No critical vulnerabilities found."


  # -----------------------------------------------------------
  # 5Ô∏è‚É£ DEPLOY STAGE
  # -----------------------------------------------------------
  deploy:
    name: üöÄ Deploy - kob-deploy-non-prod
    needs: verify-docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Non-Prod
        run: |
          echo "Deploying application to KOB Non-Prod environment..."
          sleep 3
          echo "‚úÖ Deployment completed successfully."


  # -----------------------------------------------------------
  # 6Ô∏è‚É£ VALIDATE-DEPLOY STAGE
  # -----------------------------------------------------------
  validate-deploy:
    name: ‚úÖ Validate Non-Prod Deploy
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Validate Deployment
        run: |
          echo "Validating Non-Prod deployment..."
          sleep 3
          echo "‚úÖ Validation completed successfully."
