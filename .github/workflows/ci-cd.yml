name: Triumph CI/CD Pipeline

on:
  push:
    branches:
      - '**'   # triggers on all branches

env:
  APP_NAME: triumph-healthcheck-processor
  IMAGE_NAME: triumph-healthcheck-processor
  DOCKER_REGISTRY: ghcr.io/${{ github.repository }}
  MAVEN_CLI_OPTS: "-B -DskipTests"

jobs:
  # --------------------------------------------------------
  # 1️⃣ BUILD
  # --------------------------------------------------------
  build:
    name: Build (Compile & Package)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Build with Maven
        run: mvn $MAVEN_CLI_OPTS clean package
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar

  # --------------------------------------------------------
  # 2️⃣ VERIFY BUILD (Parallel Jobs)
  # --------------------------------------------------------
  blackduck-scan:
    name: BlackDuck Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run BlackDuck scan here"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run SonarQube or code quality scan here"

  xray_scan:
    name: Xray Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run JFrog Xray scan here"

  checkmarx_scan:
    name: Checkmarx Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run Checkmarx scan"

  sast-scan:
    name: SAST Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run static analysis tools (Snyk, Bandit, etc.)"

  sca-scan:
    name: SCA Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run dependency vulnerability scan"

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Run Unit Tests
        run: mvn test
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

  # --------------------------------------------------------
  # 3️⃣ BUILD-CONTAINER
  # --------------------------------------------------------
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [blackduck-scan, code-quality, xray_scan, checkmarx_scan, sast-scan, sca-scan, unit-test]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Image
        run: docker build -t $DOCKER_REGISTRY:$GITHUB_SHA .
      - name: Push Docker Image
        run: docker push $DOCKER_REGISTRY:$GITHUB_SHA

  # --------------------------------------------------------
  # 4️⃣ VERIFY-DOCKER
  # --------------------------------------------------------
  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}:${{ github.sha }}
          format: table
          exit-code: '0'
          ignore-unfixed: true

  # --------------------------------------------------------
  # 5️⃣ DEPLOY
  # --------------------------------------------------------
  kob-deploy-non-prod:
    name: Deploy to Non-Prod
    runs-on: ubuntu-latest
    needs: container-scan
    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
      - name: Deploy Image
        run: |
          kubectl -n non-prod set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=${{ env.DOCKER_REGISTRY }}:${{ github.sha }} --record
          kubectl -n non-prod rollout status deployment/${{ env.APP_NAME }} --timeout=120s

  # --------------------------------------------------------
  # 6️⃣ VALIDATE DEPLOY
  # --------------------------------------------------------
  validate-non-prod-deploy:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: kob-deploy-non-prod
    steps:
      - name: Validate Pods
        run: kubectl get pods -n non-prod
      - name: Check Health Endpoint
        run: |
          SERVICE_URL="http://nonprod.example.com/actuator/health"
          echo "Checking $SERVICE_URL"
          curl --fail --silent $SERVICE_URL || (echo "Health check failed" && exit 1)
