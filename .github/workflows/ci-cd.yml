name: Triumph CI/CD Pipeline

on:
  push:
    branches:
      - 'feature/**'   # triggers on all branches
permissions:
  contents: read
  packages: write

env:
  APP_NAME: welcome
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_NAME: welcome:${{ github.sha }}
  NAMESPACE: samrat-dev
  KUBECONFIG_PATH: C:\Users\RAJMC\.kube\config
  DOCKER_REGISTRY: ghcr.io/${{ github.repository }}
  MAVEN_CLI_OPTS: "-B -DskipTests"
  HEALTH_URL: http://localhost:31010/mybank/welcome?name=Raj

jobs:
  # --------------------------------------------------------
  # 1Ô∏è‚É£ BUILD
  # --------------------------------------------------------
  build:
    name: compile-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Build with Maven
        run: mvn $MAVEN_CLI_OPTS clean package
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar

  # --------------------------------------------------------
  # 2Ô∏è‚É£ VERIFY BUILD (Parallel Jobs)
  # --------------------------------------------------------
  blackduck-scan:
    name: blackduck-scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run BlackDuck scan here"

  code-quality:
    name: code-quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run SonarQube or code quality scan here"

  xray_scan:
    name: xray_scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run JFrog Xray scan here"

  checkmarx_scan:
    name: checkmarx_scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run Checkmarx scan"

  sast-scan:
    name: sast-scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run static analysis tools (Snyk, Bandit, etc.)"

  sca-scan:
    name: sca-scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run dependency vulnerability scan"

  unit-test:
    name: unit-test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Run Unit Tests
        run: mvn test
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

  # --------------------------------------------------------
  # 3Ô∏è‚É£ BUILD-CONTAINER
  # --------------------------------------------------------
  build-docker:
    name: build-docker-image
    runs-on: ubuntu-latest
    needs: [blackduck-scan, code-quality, xray_scan, checkmarx_scan, sast-scan, sca-scan, unit-test]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Image
        run: |
          echo "Building image: $DOCKER_REGISTRY/$IMAGE_NAME"
          docker build -t $DOCKER_REGISTRY/$IMAGE_NAME .
      - name: Push Docker Image
        run: |
         echo "Pushing image: $DOCKER_REGISTRY/$IMAGE_NAME"
         docker push $DOCKER_REGISTRY/$IMAGE_NAME

  # --------------------------------------------------------
  # 4Ô∏è‚É£ VERIFY-DOCKER
  # --------------------------------------------------------
  container-scan:
    name: container-scan
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          format: table
          exit-code: '0'
          ignore-unfixed: true

  # --------------------------------------------------------
  # 5Ô∏è‚É£ DEPLOY
  # --------------------------------------------------------
  kob-deploy-non-prod:
    name: deploy-to-local-kubernetes
    runs-on: self-hosted
    needs: container-scan
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up kubectl context
        shell: pwsh
        run: |
            $env:KUBECONFIG = "${{ env.KUBECONFIG_PATH }}"
            kubectl config use-context docker-desktop
            kubectl cluster-info
            kubectl get nodes

      - name: Create namespace if not exists
        shell: pwsh
        run: |
          kubectl get namespace samrat-dev -o name || kubectl create namespace samrat-dev

      - name: Update image tag dynamically
        shell: pwsh
        run: |
            $image = "${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"
            Write-Host "Updating deployment image to $image"
            kubectl set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=$image -n ${{ env.NAMESPACE }} --record

      - name: Apply manifests
        shell: bash
        run: |
            export IMAGE_TAG=${GITHUB_SHA}
            export DOCKER_REGISTRY=ghcr.io/${{ github.repository }}
            kubectl apply -f k8s/configmap.yaml -n ${{ env.NAMESPACE }}
            kubectl apply -f k8s/service.yaml -n ${{ env.NAMESPACE }}
            envsubst < k8s/deployment.yaml | kubectl apply -f - -n samrat-dev
            kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }}
            kubectl get pods -n ${{ env.NAMESPACE }}

  # --------------------------------------------------------
  # 6Ô∏è‚É£ VALIDATE DEPLOY
  # --------------------------------------------------------
  validate-non-prod-deploy:
    name: validate-non-prod-deploy
    runs-on: self-hosted
    needs: kob-deploy-non-prod

    steps:
      - name: Set up KUBECONFIG
        shell: pwsh
        run: |
          $env:KUBECONFIG = "${{ env.KUBECONFIG_PATH }}"
          kubectl config use-context docker-desktop
          kubectl cluster-info
          kubectl get nodes

      - name: Verify ${{ env.APP_NAME }} pods
        shell: pwsh
        run: |
          Write-Host "üîç Checking ${{ env.APP_NAME }} pods in namespace '${{ env.NAMESPACE }}'..."
          $pods = kubectl get pods -n ${{ env.NAMESPACE }} --no-headers | Select-String "${{ env.APP_NAME }}"
          if (-not $pods) {
            Write-Error "‚ùå No pods found for ${{ env.APP_NAME }}!"
            exit 1
          }
          kubectl get pods -n ${{ env.NAMESPACE }} -o wide | Select-String "${{ env.APP_NAME }}"

      - name: Wait for pods to be Ready
        shell: pwsh
        run: |
          Write-Host "‚è≥ Waiting for ${{ env.APP_NAME }} pods to become Ready..."
          kubectl wait --for=condition=ready pod -l app=${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=180s
          Write-Host "‚úÖ All pods are Ready."

      - name: Check application health endpoint
        shell: pwsh
        run: |
          $SERVICE_URL = "${{ env.HEALTH_URL }}"
          Write-Host "üåê Performing health check on: $SERVICE_URL"
          try {
            $response = Invoke-WebRequest -Uri $SERVICE_URL -UseBasicParsing -TimeoutSec 20
            if ($response.StatusCode -eq 200) {
              Write-Host "‚úÖ Health check passed! Application is reachable."
            } else {
              Write-Error "‚ùå Health check failed with status code $($response.StatusCode)"
              exit 1
            }
          } catch {
            Write-Error "‚ùå Health check failed: $($_.Exception.Message)"
            exit 1
          }

      - name: Display deployment rollout history
        shell: pwsh
        run: |
          Write-Host "üìú Deployment rollout history for ${{ env.APP_NAME }}:"
          kubectl rollout history deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }}
